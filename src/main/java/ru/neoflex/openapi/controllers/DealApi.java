/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.neoflex.openapi.controllers;

import ru.neoflex.openapi.dtos.ErrorResponse;
import ru.neoflex.openapi.dtos.FinishRegistrationRequestDTO;
import ru.neoflex.openapi.dtos.LoanApplicationRequestDTO;
import ru.neoflex.openapi.dtos.LoanOfferDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-08-26T13:42:25.056214800+03:00[Europe/Moscow]")
@Validated
@Tag(name = "deal", description = "the deal API")
public interface DealApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /deal/offer : Choosing one of the offers
     *
     * @param loanOfferDTO  (required)
     * @return Offer applied (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "applyOffer",
        summary = "Choosing one of the offers",
        responses = {
            @ApiResponse(responseCode = "200", description = "Offer applied"),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/deal/offer",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _applyOffer(
        @Parameter(name = "LoanOfferDTO", description = "", required = true) @Valid @RequestBody LoanOfferDTO loanOfferDTO
    ) {
        return applyOffer(loanOfferDTO);
    }

    // Override this method
    default  ResponseEntity<Void> applyOffer(LoanOfferDTO loanOfferDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /deal/application : Calculation of loan terms
     *
     * @param loanApplicationRequestDTO  (required)
     * @return Application created (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "createApplication",
        summary = "Calculation of loan terms",
        responses = {
            @ApiResponse(responseCode = "200", description = "Application created", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LoanOfferDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/deal/application",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<LoanOfferDTO>> _createApplication(
        @Parameter(name = "LoanApplicationRequestDTO", description = "", required = true) @Valid @RequestBody LoanApplicationRequestDTO loanApplicationRequestDTO
    ) {
        return createApplication(loanApplicationRequestDTO);
    }

    // Override this method
    default  ResponseEntity<List<LoanOfferDTO>> createApplication(LoanApplicationRequestDTO loanApplicationRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"totalAmount\" : 10150.0, \"isSalaryClient\" : true, \"monthlyPayment\" : 1756.38, \"rate\" : 13, \"requestedAmount\" : 10000.0, \"term\" : 6, \"applicationId\" : 1, \"isInsuranceEnabled\" : true }, { \"totalAmount\" : 10150.0, \"isSalaryClient\" : true, \"monthlyPayment\" : 1756.38, \"rate\" : 13, \"requestedAmount\" : 10000.0, \"term\" : 6, \"applicationId\" : 1, \"isInsuranceEnabled\" : true }, { \"totalAmount\" : 10150.0, \"isSalaryClient\" : true, \"monthlyPayment\" : 1756.38, \"rate\" : 13, \"requestedAmount\" : 10000.0, \"term\" : 6, \"applicationId\" : 1, \"isInsuranceEnabled\" : true }, { \"totalAmount\" : 10150.0, \"isSalaryClient\" : true, \"monthlyPayment\" : 1756.38, \"rate\" : 13, \"requestedAmount\" : 10000.0, \"term\" : 6, \"applicationId\" : 1, \"isInsuranceEnabled\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /deal/calculate/{applicationId} : Completion of registration and full loan calculation
     *
     * @param applicationId Id of application (required)
     * @param finishRegistrationRequestDTO  (required)
     * @return Application updated (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "finishRegistration",
        summary = "Completion of registration and full loan calculation",
        responses = {
            @ApiResponse(responseCode = "200", description = "Application updated"),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/deal/calculate/{applicationId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _finishRegistration(
        @Parameter(name = "applicationId", description = "Id of application", required = true, in = ParameterIn.PATH) @PathVariable("applicationId") Long applicationId,
        @Parameter(name = "FinishRegistrationRequestDTO", description = "", required = true) @Valid @RequestBody FinishRegistrationRequestDTO finishRegistrationRequestDTO
    ) {
        return finishRegistration(applicationId, finishRegistrationRequestDTO);
    }

    // Override this method
    default  ResponseEntity<Void> finishRegistration(Long applicationId, FinishRegistrationRequestDTO finishRegistrationRequestDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
